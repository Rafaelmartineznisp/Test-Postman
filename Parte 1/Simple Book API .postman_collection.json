{
	"info": {
		"_postman_id": "2d20821d-b02d-4895-9a30-0ad8397286b1",
		"name": "Simple Book API ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23405630"
	},
	"item": [
		{
			"name": "Estado de la API exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo de estado es  200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response= pm.response.json();\r",
							"console.log(response);\r",
							"\r",
							"pm.test(\"Registro de cliente exitoso\", () =>{\r",
							"    pm.expect(response.status).to.eql(\"OK\"); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registrar Cliente Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response= pm.response.json();\r",
							"//var json = JSON.parse(responseBody);\r",
							"//console.log(response);\r",
							"//console.log(json);\r",
							"//pm.collectionVariables.set(\"UltimoToken \", response.accessToken);\r",
							"pm.globals.set(\"TokenTest\", response.accessToken);\r",
							"\r",
							"//var tt = pm.collectionVariables.get(\"UltimoToken\");\r",
							"//ar tt = pm.collectionVariables.get(\"UltimoToken\");\r",
							"\r",
							"pm.test(\"Registro de cliente exitoso\", () =>{\r",
							"   // var test=response;\r",
							"   //pm.expect((response.accessToken).to.equal(json));\r",
							"    pm.expect(response.accessToken).to.equal(pm.globals.get(\"TokenTest\"));\r",
							"   // pm.expect((jsonData.data.createLp.segmentId).to.equal(pm.collectionVariables.get(\"createdSegmentId\")));\r",
							"   // console.log(test);\r",
							"// pm.expect(response.id).to.equal(pm.globals.get(\"orderId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"[{{$randomFullName}}]\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registrar Cliente Fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"var response = pm.response.json();\r",
							"\r",
							"pm.test(\"Registro de clinete fallido\",()=>{\r",
							"\r",
							"pm.expect(response.error).to.eql(\"API client already registered. Try a different email.\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Martinez\",\r\n   \"clientEmail\": \"martinez@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar  libros exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo del esatdo es  200\",() =>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var  jsonData = pm.response.json(); \r",
							"console.log(jsonData);\r",
							"\r",
							"pm.test(\"Peliculas de tipo no ficcion exitoso\",()=>{\r",
							"   var movies = jsonData.find((x) => x.type == \"non-fiction\" && x.available== true);\r",
							"     console.log(movies);\r",
							"     pm.expect(movies.available).to.eql(true);\r",
							"     pm.globals.set(\"bookId\", movies.id);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//pm.test(\"Movies for type non-fiction \",()=>{\r",
							"  // var movies = jsonData.find((x) => x.type == \"non-fiction\" && x.available== true);\r",
							" //  var movies = jsonData.filter((x) => x.type == \"non-fiction\");\r",
							"    //   movies.find(x => x.available== true);\r",
							" //   console.log(movies);\r",
							"   //var free1=free[0];\r",
							"  //  pm.expect(free1.name).to.eql(\"Untamed\");\r",
							"   //  pm.expect(movies.available).to.eql(true);\r",
							"   //pm.globals.set(\"bookId\", nonFictioBooks[0].id);\r",
							"//});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"   \r",
							"   //**const nonFictioBooks=response.filter((book)=>book.available === true);\r",
							"//const book=nonFictioBooks[0];\r",
							"//console.log(book);\r",
							"//pm.test(\"Book Found\",() =>{\r",
							"  //  pm.expect(book).to.be.an('object');\r",
							"    //pm.expect(book.available).to.be.true;\r",
							"    //pm.expect(book.available).to.eql(true);\r",
							"    //pm.expect(book.available).to.eql(true);\r",
							"//});\r",
							"\r",
							"  // pm.expect(free.id).eql(5);\r",
							"\r",
							"\r",
							"    \r",
							"    //const nonFictioBooks=response.filter((book)=>book.available === true)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar  libros  Fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Codigo del esatdo es  200\",() =>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var  jsonData = pm.response.json(); \r",
							"console.log(jsonData);\r",
							"\r",
							"pm.test(\"Peliculas de tipo romanticas failed \",()=>{\r",
							"    var libros = jsonData.filter((x) => x.type == \"fiction\");\r",
							"    console.log(libros);\r",
							"        pm.expect(jsonData.type).to.eql(\"Drama\");\r",
							"       \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//pm.test(\"Movies for type non-fiction \",()=>{\r",
							"  // var movies = jsonData.find((x) => x.type == \"non-fiction\" && x.available== true);\r",
							" //  var movies = jsonData.filter((x) => x.type == \"non-fiction\");\r",
							"    //   movies.find(x => x.available== true);\r",
							" //   console.log(movies);\r",
							"   //var free1=free[0];\r",
							"  //  pm.expect(free1.name).to.eql(\"Untamed\");\r",
							"   //  pm.expect(movies.available).to.eql(true);\r",
							"   //pm.globals.set(\"bookId\", nonFictioBooks[0].id);\r",
							"//});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"   \r",
							"   //**const nonFictioBooks=response.filter((book)=>book.available === true);\r",
							"//const book=nonFictioBooks[0];\r",
							"//console.log(book);\r",
							"//pm.test(\"Book Found\",() =>{\r",
							"  //  pm.expect(book).to.be.an('object');\r",
							"    //pm.expect(book.available).to.be.true;\r",
							"    //pm.expect(book.available).to.eql(true);\r",
							"    //pm.expect(book.available).to.eql(true);\r",
							"//});\r",
							"\r",
							"  // pm.expect(free.id).eql(5);\r",
							"\r",
							"\r",
							"    \r",
							"    //const nonFictioBooks=response.filter((book)=>book.available === true)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener libro exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() =>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"console.log(response);\r",
							"\r",
							"pm.test(\"Is in stock successful \",() =>{\r",
							"    pm.expect(response['current-stock']).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:bookId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"query": [
						{
							"key": null,
							"value": "",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener libro fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\",() =>{\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"console.log(response);\r",
							"\r",
							"pm.test(\"este libro no esta stock \",() =>{\r",
							"    pm.expect(response.error);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/:bookIdfalso",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":bookIdfalso"
					],
					"variable": [
						{
							"key": "bookIdfalso",
							"value": "{{bookIdfalso}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Solicitar  Libro exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",()=> {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.globals.set(\"orderId\", response.orderId);\r",
							" console.log(response);\r",
							"\r",
							"pm.test(\"order creation successful\", () => {\r",
							"pm.expect(response.created).to.eql(true);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 3,\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Solicitar  Libro Fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",()=> {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"const response = pm.response.json();\r",
							" console.log(response);\r",
							"\r",
							"\r",
							"pm.test(\"solicitud de libro fallido \", () => {\r",
							"pm.expect(response.error).to.eql(\"Invalid or missing bookId.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\":{{bookIdfalso}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "listar Ordenes  de los libros exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"console.log(jsondata);\r",
							"\r",
							"pm.test(\"validar lista exitoso\", () =>{\r",
							"var user = jsondata.find(x => x.id=='GvP8oXNzwvfho0aEMcsM7');\r",
							"pm.expect(user.customerName).eql(\"Lorena Wisozk\");\r",
							" console.log(user);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "listar Ordenes  de los libros fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsondata = pm.response.json();\r",
							"console.log(jsondata);\r",
							"\r",
							"pm.test(\"validar lista fallido\", () =>{\r",
							"var user = jsondata.find(x => x.id=='GvP8oXNzwvfho0aEMcsM7');\r",
							"pm.expect(user.customerName).eql(\"Rafael Martinez\");\r",
							" console.log(user);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Qbtener una orden exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"console.log(response);\r",
							"\r",
							"pm.test((\"Obtener orden exitoso \"),()=>{\r",
							"    pm.expect(response.id).to.equal(pm.globals.get(\"orderId\"));\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Qbtener una orden fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\",()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"var response = pm.response.json();\r",
							"console.log(response);\r",
							"\r",
							"\r",
							"pm.test((\"Obtener orden fallido\"),()=>{\r",
							"    pm.expect(response.error).to.equal(\"No order with id ffffff.\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/:orderIdfalso",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderIdfalso"
					],
					"variable": [
						{
							"key": "orderIdfalso",
							"value": "{{orderIdfalso}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar una orden exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\",()=> {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"customerName\": \"John {{$randomLastName}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar una orden  fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\",()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var response= pm.response.json();\r",
							"pm.test(\"actualizacion de orden  fallido \", () => {\r",
							"pm.expect(response.error).to.eql(\"No order with id 122.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"customerName\": \"John {{$randomLastName}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderIdfalso",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderIdfalso"
					],
					"variable": [
						{
							"key": "orderIdfalso",
							"value": "{{bookIdfalso}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una Orden exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\",()=> {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"customerName\": \"John {{$randomLastName}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una Orden fallido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\",()=> {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"var response= pm.response.json();\r",
							"pm.test(\"Eliminacion de orden  fallida \", () => {\r",
							"pm.expect(response.error).to.eql(\"No order with id ffffff.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"customerName\": \"John {{$randomLastName}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderIdfalso",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderIdfalso"
					],
					"variable": [
						{
							"key": "orderIdfalso",
							"value": "{{orderIdfalso}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Solicitar  Libro",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",()=> {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.globals.set(\"orderId\", response.orderId);\r",
							" console.log(response);\r",
							"\r",
							"pm.test(\"order creation successful\", () => {\r",
							"pm.expect(response.created).to.eql(true);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 3,\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "b9401a1d3c82e2cbd7db089021426e22ffc774a71a35c669e2fa7f69b779da16",
			"type": "string"
		},
		{
			"key": "UltimoToken ",
			"value": "6be81edc7d23ea11aff824f6698ef14447bb52c8b3269d06fe988e716817dcab"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}